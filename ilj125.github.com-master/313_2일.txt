[오늘의 목표]
1.연산자 (다음 주 월요일까지 이어서)

[오늘의 조별 숙제]
1.next와 nextline의 차이점
2.윤년구하기 

next() : 띄어쓰기(=\\s)를 기준으로 입력 받는다.
nextline() : 줄바꿈(=\n)을 기준으로 입력 받는다.

주의) 줄바꿈 뒤에 입력한 nextline이란 메서드가  줄바꿈만 인식하고 메서드를 종료하기 때문에 줄바꿈 데이터만 들어간 채로 프로그램이 계속진행된다.

-------------------------------------------------------------------------------------------------------------
*class는 자바가 인식하는 파일이 아니라 JVM(Java Virtual Mashine)이 인식하는 파일이다. 
 JVM은 자바가상머신으로 클래스 파일로 인식한다.

*강제 형변환 할때 int(값) 이면, ( )를 캐스팅 한다고 한다.

*연습문제 데이터형 카페 3번 문제
byte a = 64 , byte b = 64 일 때 result = a + b 라고 하면 값은? 
 64=0100 0000 (2) 이다.
 64 + 64 = 0200 0000(2) = 1000 0000 (2) 이다.  자바는 맨 앞 숫자는 부호를 나타낸다. 1이기에 '-' + 1000 0000(2) 이므로 답은 -128 입니다. 

*연습문제 데이터형 카페 5번 문제
1 0110 1000(2) 인데 byte 형이면  byte는 8칸이기 때문에 앞에 쭉 짜르고 0110 1000(2)만 인식한다.

*상수로 선언 교과서 62p
final 변수 선언
final int a =3; // 상수는 값이 변하지 않음

*변수를 실수로 선언하더라도 계산 할때 정수 계산 정수를 하면 정수 밖에 안나온다. 데이터 형 변환을 해저야한다.(ex05_scanner.java)
double avg =(double)total /3; //평균구하기

*var 변수 는 변수를 자료형을 선언 안하고 변수 선언 한 경우 입니다. 지역 변수에서만 사용 할 수 있습니다.

*자바는 초기화 되지 않으면 즉 값이 없으면 사용 할 수가 없습니다. 

*자바 api에서 scanner 검색
package에 java.util 클릭 -> 밑에 클래스 중에 scanner 검색

*자바 패캐지 안에 필요한거를 이클립스로 불러오는 방법
import java.util.Scanner;
자동 불러오기 방법 = ctrl + shift + o (영어타자 오)

*데이터 입력 받는 법 Scanner
1) Scanner로 입력 받을 통로를 하나 만들어 준다. (여러개 받을려 해도 통로는 하나만 있으면 된다.
 Scanner input = new Scanner(System.in);
2)입력받은 데이터값을 변수에 저장 하기 
 변수 = input.nextInt();
주의) 위에서 변수가 int 형이면 input.nextInt() 이고 double 형이면 input.nextDouble()이다.
주의) nextInt 는 입력받은데이터를 Int 형으로 받는 것이다.
주의) 입력받는 데이터가 String 일 때  next() or nextLine()을 사용한다.
주의) next 는 띄어쓰기 까지 문자열을 인식한다. nextLine은 엔터 앞에 까지만 입력받을게 
       근데 nextLine은 앞에서 다른 데이터를 입력 하고 enter를 누르면  먹어 버린다. 
(sol) 먹어버릴용으로 하나 명령어를 적어서 먹게 한다. exam.java에 입력 a_datatype 안에 있음 
      input.hasNextLine(); //// next라인은 앞에서 엔터를 치면 실행이 안되고 먹어버리기 때문에 먹으라고 하나 던져 준다.
		System.out.println("이름을 입력해 주세요.");
		name=input.nextLine();


*이클립스 매직 키 메인 함수 만들기 ctrl + space + enter

*연산자 공부는 b_operator 풀더 안에 있음 카페에 연산자 글에 첨부 파일에있음

*++, -- 증가 감소 연산자 많이 씀 (파이썬에서는 잘 안씀), 앞에쓰는지 뒤에쓰는지 !!!!!!!!!!!!위치가 중요하다.
*++, -- 증감연산자는 변수 앞에 써줘야 한다. 변수 앞에 ++이 있으면 ++증감 먼저 하고 대입입니다.
System.out.println("a="+(++a)+",b="+(--b));
*++, -- 증감연산자를 변수 뒤에 써주면 먼저 대입하고 뺍니다.

*출력에서 a 와 b라는 변수가있을 때 각 각 1을 더해 주고 싶다면  (a+1) 가로 처리를 해줘야 합니다.
System.out.println("a="+(a+1)+" b="+(b+1))

*system.out.println ( ) 가로 안에서 변수에 값이 변해도 전체적으로 변수에 값이 변화한다.
System.out.println("a="+ a++ + ",b=" + b--);//원래 a= 5, b =7일 때 저 프린트를 출력하고 나면 a= 6, b= 6으로 변수의 값이 바뀐다.

*단항 연산자는 항 하나에다가 붙이는 거다. 
 단항에서의 +, -는 양수, 음수를 구분한다. 
 단항에서의 !, ~ not 연산자.  

*not : 결과를 반대로 하는 연산자 (b_operator Ex02)
 - 일반논리 not :  ! (true를 false로 바꿔주는 연산자)
 boolean result = 3>4; //result 값은 false
 System.out.println(!result);//출력되는 값은 true	
 - 이진논리 not : ~ (각 비트의 값이 0 이면 1로 바꾸고 1을 0으로 바꿈)(잘 안쓴다)
 //a15  00000000 00000000 00000000 00001111
 //~a   11111111 11111111 11111111 11110000
 //결론 음수로 나온다. 맨 앞에 부호가 1 이므로 음수 이다.

*shift (잘 안씀) : '<< ' 모든 비트를 왼쪽으로 이동
                   : '>>' 모든 비트를 오른쪽으로 이동(부호는 변하지 않음) 앞에 빈부분을 부호랑같은 거로 채운다 음수이면 1로 쭉 다 채운다.
                    :'>>>' 부호비트를 0으로 채움 오른쪽으로 이동하는데
변수 >> 2 ; 변수의 2진수에서 모든 비트를 오른쪽으로 2칸 이동 하세요.

*논리 연산자 일반논리 연산자 True False
 &&: and 둘 다 참이어야 한다.
 || :or 둘 중 하나만 참이어도 참.

*논리 연산자 이진논리 연산자, 비교했을 때 True면 1 , False면 0
^(xor) : 두 개가 다를 때만 인정할거야, 개발에서 쓸 일이 없지만 구경을 합시다.
& : 둘 다 참 즉 1이어야  참 아니면 다 거짓 
| : 둘 중에 참 하나만 있어도 참 아니면 다 거짓

*윤년 Leap_year 파일 이클립스 저장 해놓음.
















